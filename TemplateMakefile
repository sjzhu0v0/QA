# Base directory for the analysis project
DIR_BASE=/lustre/alice/users/szhu/work/Analysis/PairFlow
PATH_INCLUDE=$(DIR_BASE)/include
FLAGS_INCLUDE=-I$(DIR_BASE)/include -I$(DIR_BASE)/macro
FLAGS_ROOT=$(shell root-config --cflags --libs)
FLAGS_MINUIT=-lMinuit

# Output directory for executables
DIR_EXE = exe

# List of source directories (add more as needed)
SRC_DIRS := /home/szhu/work/alice/analysis/QA/process/jpsi \
            /home/szhu/work/alice/analysis/QA/process/upsilon \
            /home/szhu/work/alice/analysis/QA/utils

# Collect all .cpp files from all source directories
SOURCES := $(foreach dir,$(SRC_DIRS),$(wildcard $(dir)/*.cpp))

# Derive executable paths in exe/ directory (e.g., exe/process_jpsi.exe)
TARGETS := $(addprefix $(DIR_EXE)/,$(notdir $(SOURCES:.cpp=.exe)))

# Debug output
$(info === Debug info ===)
$(info SOURCES = $(SOURCES))
$(info TARGETS = $(TARGETS))
$(info ================)

.PHONY: all clean

# Build all targets
all: $(TARGETS)
	@echo "All targets built: $(TARGETS)"

# Rule to create the exe directory (order-only prerequisite)
$(DIR_EXE):
	@mkdir -p $@

# Dynamically generate a build rule for each source file
# Each .exe is placed in $(DIR_EXE)/ and depends on its full-path .cpp
define make_target_rule
$(DIR_EXE)/$(notdir $(1:.cpp=.exe)): $(1) | $(DIR_EXE)
	@g++ $$< -o $$@ $(FLAGS_INCLUDE) $(FLAGS_ROOT) $(FLAGS_MINUIT)
	@echo "Compiled: $$< -> $$@"
endef

# Apply the rule to every source file
$(foreach src,$(SOURCES),$(eval $(call make_target_rule,$(src))))

# Clean all generated executables and the exe directory
clean:
	rm -rf $(DIR_EXE)

# macro/event/MultREFRaw.exe: macro/event/MultREFRaw.cpp
# 	g++ -o $@ $^ $(FLAGS_INCLUDE) $(FLAGS_ROOT) $(FLAGS_MINUIT)

# macro/event_jpsi/JpsiAsso.exe: macro/event_jpsi/JpsiAsso.cpp
# 	g++ -o $@ $^ $(FLAGS_INCLUDE) $(FLAGS_ROOT) $(FLAGS_MINUIT) -I./ -L./opt -lMRootDict

# macro/event_jpsi/MixEventReading.exe: macro/event_jpsi/MixEventReading.cpp opt/libMRootDict.so
# 	g++ -o $@ macro/event_jpsi/MixEventReading.cpp $(FLAGS_INCLUDE) $(FLAGS_ROOT) $(FLAGS_MINUIT) -I./ -L./opt -lMRootDict

# opt/MRootDict.cxx: opt/EventData.h opt/LinkDef.h
# 	rootcint -f $@ -c opt/EventData.h opt/LinkDef.h $(FLAGS_INCLUDE)

# opt/libMRootDict.so: opt/MRootDict.cxx opt/EventData.cxx
# 	g++ -o $@ $^ -I./ `root-config --cflags --libs` -shared -fPIC